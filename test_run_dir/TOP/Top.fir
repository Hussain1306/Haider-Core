;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module Control_type_decode : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, R_type : UInt<1>, Load : UInt<1>, S_type : UInt<1>, SB_type : UInt<1>, I_type : UInt<1>, JALR : UInt<1>, JAL : UInt<1>, LUI : UInt<1>, AUIPC : UInt<1>}
    
    node _T = eq(io.opcode, UInt<6>("h033")) @[Control_type_decode.scala 23:20]
    when _T : @[Control_type_decode.scala 23:37]
      io.R_type <= UInt<1>("h01") @[Control_type_decode.scala 24:19]
      io.Load <= UInt<1>("h00") @[Control_type_decode.scala 25:17]
      io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 26:19]
      io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 27:20]
      io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 28:19]
      io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 29:17]
      io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 30:16]
      io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 31:16]
      io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 32:18]
      skip @[Control_type_decode.scala 23:37]
    else : @[Control_type_decode.scala 33:43]
      node _T_1 = eq(io.opcode, UInt<5>("h013")) @[Control_type_decode.scala 33:26]
      when _T_1 : @[Control_type_decode.scala 33:43]
        io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 34:19]
        io.Load <= UInt<1>("h00") @[Control_type_decode.scala 35:17]
        io.I_type <= UInt<1>("h01") @[Control_type_decode.scala 36:19]
        io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 37:20]
        io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 38:19]
        io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 39:17]
        io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 40:16]
        io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 41:16]
        io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 42:18]
        skip @[Control_type_decode.scala 33:43]
      else : @[Control_type_decode.scala 43:43]
        node _T_2 = eq(io.opcode, UInt<6>("h023")) @[Control_type_decode.scala 43:26]
        when _T_2 : @[Control_type_decode.scala 43:43]
          io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 44:19]
          io.Load <= UInt<1>("h00") @[Control_type_decode.scala 45:17]
          io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 46:19]
          io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 47:20]
          io.S_type <= UInt<1>("h01") @[Control_type_decode.scala 48:19]
          io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 49:17]
          io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 50:16]
          io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 51:16]
          io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 52:18]
          skip @[Control_type_decode.scala 43:43]
        else : @[Control_type_decode.scala 53:43]
          node _T_3 = eq(io.opcode, UInt<5>("h017")) @[Control_type_decode.scala 53:26]
          when _T_3 : @[Control_type_decode.scala 53:43]
            io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 54:19]
            io.Load <= UInt<1>("h00") @[Control_type_decode.scala 55:17]
            io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 56:19]
            io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 57:20]
            io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 58:19]
            io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 59:17]
            io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 60:16]
            io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 61:16]
            io.AUIPC <= UInt<1>("h01") @[Control_type_decode.scala 62:18]
            skip @[Control_type_decode.scala 53:43]
          else : @[Control_type_decode.scala 63:43]
            node _T_4 = eq(io.opcode, UInt<7>("h063")) @[Control_type_decode.scala 63:26]
            when _T_4 : @[Control_type_decode.scala 63:43]
              io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 64:19]
              io.Load <= UInt<1>("h00") @[Control_type_decode.scala 65:17]
              io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 66:19]
              io.SB_type <= UInt<1>("h01") @[Control_type_decode.scala 67:20]
              io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 68:19]
              io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 69:17]
              io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 70:16]
              io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 71:16]
              io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 72:18]
              skip @[Control_type_decode.scala 63:43]
            else : @[Control_type_decode.scala 73:43]
              node _T_5 = eq(io.opcode, UInt<7>("h067")) @[Control_type_decode.scala 73:26]
              when _T_5 : @[Control_type_decode.scala 73:43]
                io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 74:19]
                io.Load <= UInt<1>("h00") @[Control_type_decode.scala 75:17]
                io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 76:19]
                io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 77:20]
                io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 78:19]
                io.JALR <= UInt<1>("h01") @[Control_type_decode.scala 79:17]
                io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 80:16]
                io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 81:16]
                io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 82:18]
                skip @[Control_type_decode.scala 73:43]
              else : @[Control_type_decode.scala 83:43]
                node _T_6 = eq(io.opcode, UInt<6>("h037")) @[Control_type_decode.scala 83:26]
                when _T_6 : @[Control_type_decode.scala 83:43]
                  io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 84:19]
                  io.Load <= UInt<1>("h00") @[Control_type_decode.scala 85:17]
                  io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 86:19]
                  io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 87:20]
                  io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 88:19]
                  io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 89:17]
                  io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 90:16]
                  io.LUI <= UInt<1>("h01") @[Control_type_decode.scala 91:16]
                  io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 92:18]
                  skip @[Control_type_decode.scala 83:43]
                else : @[Control_type_decode.scala 93:43]
                  node _T_7 = eq(io.opcode, UInt<7>("h06f")) @[Control_type_decode.scala 93:26]
                  when _T_7 : @[Control_type_decode.scala 93:43]
                    io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 94:19]
                    io.Load <= UInt<1>("h00") @[Control_type_decode.scala 95:17]
                    io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 96:19]
                    io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 97:20]
                    io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 98:19]
                    io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 99:17]
                    io.JAL <= UInt<1>("h01") @[Control_type_decode.scala 100:16]
                    io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 101:16]
                    io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 102:18]
                    skip @[Control_type_decode.scala 93:43]
                  else : @[Control_type_decode.scala 103:43]
                    node _T_8 = eq(io.opcode, UInt<2>("h03")) @[Control_type_decode.scala 103:26]
                    when _T_8 : @[Control_type_decode.scala 103:43]
                      io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 104:19]
                      io.Load <= UInt<1>("h01") @[Control_type_decode.scala 105:17]
                      io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 106:19]
                      io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 107:20]
                      io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 108:19]
                      io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 109:17]
                      io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 110:16]
                      io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 111:16]
                      io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 112:18]
                      skip @[Control_type_decode.scala 103:43]
                    else : @[Control_type_decode.scala 113:16]
                      io.R_type <= UInt<1>("h00") @[Control_type_decode.scala 114:19]
                      io.Load <= UInt<1>("h00") @[Control_type_decode.scala 115:17]
                      io.I_type <= UInt<1>("h00") @[Control_type_decode.scala 116:19]
                      io.SB_type <= UInt<1>("h00") @[Control_type_decode.scala 117:20]
                      io.S_type <= UInt<1>("h00") @[Control_type_decode.scala 118:19]
                      io.JALR <= UInt<1>("h00") @[Control_type_decode.scala 119:17]
                      io.JAL <= UInt<1>("h00") @[Control_type_decode.scala 120:16]
                      io.LUI <= UInt<1>("h00") @[Control_type_decode.scala 121:16]
                      io.AUIPC <= UInt<1>("h00") @[Control_type_decode.scala 122:18]
                      skip @[Control_type_decode.scala 113:16]
    
  module Control_control_decode : 
    input clock : Clock
    input reset : Reset
    output io : {flip R_type : UInt<1>, flip Load : UInt<1>, flip S_type : UInt<1>, flip SB_type : UInt<1>, flip I_type : UInt<1>, flip JALR : UInt<1>, flip JAL : UInt<1>, flip LUI : UInt<1>, flip AUIPC : UInt<1>, RegWrite : UInt<1>, MemWrite : UInt<1>, branch : UInt<1>, MemRead : UInt<1>, MemtoReg : UInt<1>, operand_A_sel : UInt<2>, operand_B_sel : UInt<1>, ALUoperation : UInt<3>, extend_sel : UInt<2>, Next_pc : UInt<2>}
    
    node _T = eq(io.R_type, UInt<1>("h01")) @[Control_control_decode.scala 34:32]
    when _T : @[Control_control_decode.scala 34:40]
      io.RegWrite <= UInt<1>("h01") @[Control_control_decode.scala 35:37]
      io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 36:36]
      io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 37:37]
      io.branch <= UInt<1>("h00") @[Control_control_decode.scala 38:35]
      io.MemtoReg <= UInt<1>("h01") @[Control_control_decode.scala 39:37]
      io.operand_A_sel <= UInt<1>("h00") @[Control_control_decode.scala 40:42]
      io.operand_B_sel <= UInt<1>("h00") @[Control_control_decode.scala 41:42]
      io.ALUoperation <= UInt<1>("h00") @[Control_control_decode.scala 42:41]
      io.extend_sel <= UInt<1>("h00") @[Control_control_decode.scala 43:39]
      io.Next_pc <= UInt<1>("h00") @[Control_control_decode.scala 44:36]
      skip @[Control_control_decode.scala 34:40]
    else : @[Control_control_decode.scala 45:44]
      node _T_1 = eq(io.Load, UInt<1>("h01")) @[Control_control_decode.scala 45:36]
      when _T_1 : @[Control_control_decode.scala 45:44]
        io.RegWrite <= UInt<1>("h01") @[Control_control_decode.scala 46:37]
        io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 47:37]
        io.MemRead <= UInt<1>("h01") @[Control_control_decode.scala 48:36]
        io.branch <= UInt<1>("h00") @[Control_control_decode.scala 49:35]
        io.MemtoReg <= UInt<1>("h00") @[Control_control_decode.scala 50:37]
        io.operand_A_sel <= UInt<1>("h00") @[Control_control_decode.scala 51:42]
        io.operand_B_sel <= UInt<1>("h01") @[Control_control_decode.scala 52:42]
        io.ALUoperation <= UInt<3>("h04") @[Control_control_decode.scala 53:41]
        io.extend_sel <= UInt<1>("h00") @[Control_control_decode.scala 54:39]
        io.Next_pc <= UInt<1>("h00") @[Control_control_decode.scala 55:36]
        skip @[Control_control_decode.scala 45:44]
      else : @[Control_control_decode.scala 56:46]
        node _T_2 = eq(io.S_type, UInt<1>("h01")) @[Control_control_decode.scala 56:38]
        when _T_2 : @[Control_control_decode.scala 56:46]
          io.RegWrite <= UInt<1>("h00") @[Control_control_decode.scala 57:37]
          io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 58:36]
          io.MemWrite <= UInt<1>("h01") @[Control_control_decode.scala 59:37]
          io.branch <= UInt<1>("h00") @[Control_control_decode.scala 60:35]
          io.MemtoReg <= UInt<1>("h00") @[Control_control_decode.scala 61:37]
          io.operand_A_sel <= UInt<1>("h00") @[Control_control_decode.scala 62:42]
          io.operand_B_sel <= UInt<1>("h01") @[Control_control_decode.scala 63:42]
          io.ALUoperation <= UInt<3>("h05") @[Control_control_decode.scala 64:41]
          io.extend_sel <= UInt<2>("h02") @[Control_control_decode.scala 65:39]
          io.Next_pc <= UInt<1>("h00") @[Control_control_decode.scala 66:36]
          skip @[Control_control_decode.scala 56:46]
        else : @[Control_control_decode.scala 67:47]
          node _T_3 = eq(io.SB_type, UInt<1>("h01")) @[Control_control_decode.scala 67:39]
          when _T_3 : @[Control_control_decode.scala 67:47]
            io.RegWrite <= UInt<1>("h00") @[Control_control_decode.scala 68:37]
            io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 69:36]
            io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 70:37]
            io.branch <= UInt<1>("h01") @[Control_control_decode.scala 71:35]
            io.MemtoReg <= UInt<1>("h00") @[Control_control_decode.scala 72:37]
            io.operand_A_sel <= UInt<1>("h00") @[Control_control_decode.scala 73:42]
            io.operand_B_sel <= UInt<1>("h01") @[Control_control_decode.scala 74:42]
            io.ALUoperation <= UInt<1>("h00") @[Control_control_decode.scala 75:41]
            io.extend_sel <= UInt<1>("h00") @[Control_control_decode.scala 76:39]
            io.Next_pc <= UInt<1>("h01") @[Control_control_decode.scala 77:36]
            skip @[Control_control_decode.scala 67:47]
          else : @[Control_control_decode.scala 78:46]
            node _T_4 = eq(io.I_type, UInt<1>("h01")) @[Control_control_decode.scala 78:38]
            when _T_4 : @[Control_control_decode.scala 78:46]
              io.RegWrite <= UInt<1>("h01") @[Control_control_decode.scala 79:37]
              io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 80:36]
              io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 81:37]
              io.branch <= UInt<1>("h00") @[Control_control_decode.scala 82:35]
              io.MemtoReg <= UInt<1>("h01") @[Control_control_decode.scala 83:37]
              io.operand_A_sel <= UInt<1>("h00") @[Control_control_decode.scala 84:42]
              io.operand_B_sel <= UInt<1>("h01") @[Control_control_decode.scala 85:42]
              io.ALUoperation <= UInt<1>("h01") @[Control_control_decode.scala 86:41]
              io.extend_sel <= UInt<1>("h00") @[Control_control_decode.scala 87:39]
              io.Next_pc <= UInt<1>("h00") @[Control_control_decode.scala 88:36]
              skip @[Control_control_decode.scala 78:46]
            else : @[Control_control_decode.scala 89:44]
              node _T_5 = eq(io.JALR, UInt<1>("h01")) @[Control_control_decode.scala 89:36]
              when _T_5 : @[Control_control_decode.scala 89:44]
                io.RegWrite <= UInt<1>("h01") @[Control_control_decode.scala 90:37]
                io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 91:36]
                io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 92:37]
                io.branch <= UInt<1>("h00") @[Control_control_decode.scala 93:35]
                io.MemtoReg <= UInt<1>("h00") @[Control_control_decode.scala 94:37]
                io.operand_A_sel <= UInt<2>("h02") @[Control_control_decode.scala 95:42]
                io.operand_B_sel <= UInt<1>("h00") @[Control_control_decode.scala 96:42]
                io.ALUoperation <= UInt<2>("h03") @[Control_control_decode.scala 97:41]
                io.extend_sel <= UInt<1>("h00") @[Control_control_decode.scala 98:39]
                io.Next_pc <= UInt<2>("h03") @[Control_control_decode.scala 99:36]
                skip @[Control_control_decode.scala 89:44]
              else : @[Control_control_decode.scala 100:43]
                node _T_6 = eq(io.JAL, UInt<1>("h01")) @[Control_control_decode.scala 100:35]
                when _T_6 : @[Control_control_decode.scala 100:43]
                  io.RegWrite <= UInt<1>("h01") @[Control_control_decode.scala 101:37]
                  io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 102:36]
                  io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 103:37]
                  io.branch <= UInt<1>("h00") @[Control_control_decode.scala 104:35]
                  io.MemtoReg <= UInt<1>("h00") @[Control_control_decode.scala 105:37]
                  io.operand_A_sel <= UInt<2>("h02") @[Control_control_decode.scala 106:42]
                  io.operand_B_sel <= UInt<1>("h00") @[Control_control_decode.scala 107:42]
                  io.ALUoperation <= UInt<2>("h03") @[Control_control_decode.scala 108:41]
                  io.extend_sel <= UInt<1>("h00") @[Control_control_decode.scala 109:39]
                  io.Next_pc <= UInt<2>("h02") @[Control_control_decode.scala 110:36]
                  skip @[Control_control_decode.scala 100:43]
                else : @[Control_control_decode.scala 111:43]
                  node _T_7 = eq(io.LUI, UInt<1>("h01")) @[Control_control_decode.scala 111:35]
                  when _T_7 : @[Control_control_decode.scala 111:43]
                    io.RegWrite <= UInt<1>("h01") @[Control_control_decode.scala 112:37]
                    io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 113:36]
                    io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 114:37]
                    io.branch <= UInt<1>("h00") @[Control_control_decode.scala 115:35]
                    io.MemtoReg <= UInt<1>("h00") @[Control_control_decode.scala 116:37]
                    io.operand_A_sel <= UInt<2>("h03") @[Control_control_decode.scala 117:42]
                    io.operand_B_sel <= UInt<1>("h00") @[Control_control_decode.scala 118:42]
                    io.ALUoperation <= UInt<3>("h06") @[Control_control_decode.scala 119:41]
                    io.extend_sel <= UInt<1>("h01") @[Control_control_decode.scala 120:39]
                    io.Next_pc <= UInt<1>("h00") @[Control_control_decode.scala 121:36]
                    skip @[Control_control_decode.scala 111:43]
                  else : @[Control_control_decode.scala 122:45]
                    node _T_8 = eq(io.AUIPC, UInt<1>("h01")) @[Control_control_decode.scala 122:37]
                    when _T_8 : @[Control_control_decode.scala 122:45]
                      io.RegWrite <= UInt<1>("h01") @[Control_control_decode.scala 123:37]
                      io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 124:36]
                      io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 125:37]
                      io.branch <= UInt<1>("h00") @[Control_control_decode.scala 126:35]
                      io.MemtoReg <= UInt<1>("h00") @[Control_control_decode.scala 127:37]
                      io.operand_A_sel <= UInt<2>("h02") @[Control_control_decode.scala 128:42]
                      io.operand_B_sel <= UInt<1>("h00") @[Control_control_decode.scala 129:42]
                      io.ALUoperation <= UInt<3>("h06") @[Control_control_decode.scala 130:41]
                      io.extend_sel <= UInt<2>("h02") @[Control_control_decode.scala 131:39]
                      io.Next_pc <= UInt<1>("h00") @[Control_control_decode.scala 132:36]
                      skip @[Control_control_decode.scala 122:45]
                    else : @[Control_control_decode.scala 133:28]
                      io.MemWrite <= UInt<1>("h00") @[Control_control_decode.scala 134:37]
                      io.MemRead <= UInt<1>("h00") @[Control_control_decode.scala 135:36]
                      io.branch <= UInt<1>("h00") @[Control_control_decode.scala 136:35]
                      io.RegWrite <= UInt<1>("h00") @[Control_control_decode.scala 137:37]
                      io.MemtoReg <= UInt<1>("h00") @[Control_control_decode.scala 138:37]
                      io.ALUoperation <= UInt<1>("h00") @[Control_control_decode.scala 139:41]
                      io.operand_A_sel <= UInt<1>("h00") @[Control_control_decode.scala 140:42]
                      io.operand_B_sel <= UInt<1>("h00") @[Control_control_decode.scala 141:42]
                      io.extend_sel <= UInt<1>("h00") @[Control_control_decode.scala 142:39]
                      io.Next_pc <= UInt<1>("h00") @[Control_control_decode.scala 143:36]
                      skip @[Control_control_decode.scala 133:28]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, MemWrite : UInt<1>, branch : UInt<1>, RegWrite : UInt<1>, MemRead : UInt<1>, MemtoReg : UInt<1>, ALUoperation : UInt<3>, operand_A_sel : UInt<2>, operand_B_sel : UInt<1>, extend_sel : UInt<2>, Next_pc : UInt<2>}
    
    inst typ_dec of Control_type_decode @[Control.scala 28:37]
    typ_dec.clock <= clock
    typ_dec.reset <= reset
    inst con_dec of Control_control_decode @[Control.scala 29:37]
    con_dec.clock <= clock
    con_dec.reset <= reset
    typ_dec.io.opcode <= io.opcode @[Control.scala 32:35]
    con_dec.io.R_type <= typ_dec.io.R_type @[Control.scala 35:35]
    con_dec.io.Load <= typ_dec.io.Load @[Control.scala 36:33]
    con_dec.io.S_type <= typ_dec.io.S_type @[Control.scala 37:35]
    con_dec.io.SB_type <= typ_dec.io.SB_type @[Control.scala 38:36]
    con_dec.io.I_type <= typ_dec.io.I_type @[Control.scala 39:35]
    con_dec.io.JALR <= typ_dec.io.JALR @[Control.scala 40:33]
    con_dec.io.JAL <= typ_dec.io.JAL @[Control.scala 41:32]
    con_dec.io.LUI <= typ_dec.io.LUI @[Control.scala 42:32]
    con_dec.io.AUIPC <= typ_dec.io.AUIPC @[Control.scala 43:26]
    io.MemWrite <= con_dec.io.MemWrite @[Control.scala 45:29]
    io.branch <= con_dec.io.branch @[Control.scala 46:27]
    io.RegWrite <= con_dec.io.RegWrite @[Control.scala 47:29]
    io.MemRead <= con_dec.io.MemRead @[Control.scala 48:27]
    io.MemtoReg <= con_dec.io.MemtoReg @[Control.scala 49:29]
    io.ALUoperation <= con_dec.io.ALUoperation @[Control.scala 50:33]
    io.operand_A_sel <= con_dec.io.operand_A_sel @[Control.scala 51:34]
    io.operand_B_sel <= con_dec.io.operand_B_sel @[Control.scala 52:34]
    io.extend_sel <= con_dec.io.extend_sel @[Control.scala 53:31]
    io.Next_pc <= con_dec.io.Next_pc @[Control.scala 54:28]
    
  module Reg_File : 
    input clock : Clock
    input reset : Reset
    output io : {flip Reg_en : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, ws1 : SInt<32>, ws2 : SInt<32>, flip wd : SInt<32>}
    
    reg reg_file : SInt<32>[32], clock @[Reg_File.scala 21:27]
    io.ws1 <= reg_file[io.rs1] @[Reg_File.scala 22:16]
    io.ws2 <= reg_file[io.rs2] @[Reg_File.scala 23:16]
    node _T = eq(io.Reg_en, UInt<1>("h01")) @[Reg_File.scala 24:24]
    when _T : @[Reg_File.scala 24:32]
      node _T_1 = eq(io.rd, UInt<1>("h00")) @[Reg_File.scala 25:28]
      when _T_1 : @[Reg_File.scala 25:43]
        reg_file[io.rd] <= asSInt(UInt<1>("h00")) @[Reg_File.scala 26:41]
        skip @[Reg_File.scala 25:43]
      else : @[Reg_File.scala 27:28]
        reg_file[io.rd] <= io.wd @[Reg_File.scala 28:41]
        skip @[Reg_File.scala 27:28]
      skip @[Reg_File.scala 24:32]
    
  module Immediate_Gen : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, immd_se : SInt<32>, flip pc : UInt<32>}
    
    io.immd_se <= asSInt(UInt<1>("h00")) @[Immediate_Gen.scala 15:20]
    node _T = bits(io.instr, 6, 0) @[Immediate_Gen.scala 17:22]
    node _T_1 = eq(_T, UInt<6>("h023")) @[Immediate_Gen.scala 17:27]
    when _T_1 : @[Immediate_Gen.scala 17:43]
      node _io_immd_se_T = bits(io.instr, 31, 31) @[Immediate_Gen.scala 18:52]
      node _io_immd_se_T_1 = bits(_io_immd_se_T, 0, 0) @[Bitwise.scala 72:15]
      node io_immd_se_hi_hi = mux(_io_immd_se_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_immd_se_hi_lo = bits(io.instr, 31, 25) @[Immediate_Gen.scala 18:66]
      node io_immd_se_lo = bits(io.instr, 11, 7) @[Immediate_Gen.scala 18:82]
      node io_immd_se_hi = cat(io_immd_se_hi_hi, io_immd_se_hi_lo) @[Cat.scala 30:58]
      node _io_immd_se_T_2 = cat(io_immd_se_hi, io_immd_se_lo) @[Cat.scala 30:58]
      node _io_immd_se_T_3 = asSInt(_io_immd_se_T_2) @[Immediate_Gen.scala 18:91]
      io.immd_se <= _io_immd_se_T_3 @[Immediate_Gen.scala 18:28]
      skip @[Immediate_Gen.scala 17:43]
    else : @[Immediate_Gen.scala 21:44]
      node _T_2 = bits(io.instr, 6, 0) @[Immediate_Gen.scala 21:23]
      node _T_3 = eq(_T_2, UInt<5>("h017")) @[Immediate_Gen.scala 21:28]
      when _T_3 : @[Immediate_Gen.scala 21:44]
        node io_immd_se_hi_hi_hi = bits(io.instr, 31, 31) @[Immediate_Gen.scala 22:44]
        node io_immd_se_hi_hi_lo = bits(io.instr, 30, 25) @[Immediate_Gen.scala 22:57]
        node io_immd_se_hi_lo_1 = bits(io.instr, 24, 21) @[Immediate_Gen.scala 22:73]
        node io_immd_se_lo_hi = bits(io.instr, 20, 20) @[Immediate_Gen.scala 22:89]
        node io_immd_se_lo_lo = bits(io.instr, 19, 12) @[Immediate_Gen.scala 22:102]
        node io_immd_se_lo_1 = cat(io_immd_se_lo_hi, io_immd_se_lo_lo) @[Cat.scala 30:58]
        node io_immd_se_hi_hi_1 = cat(io_immd_se_hi_hi_hi, io_immd_se_hi_hi_lo) @[Cat.scala 30:58]
        node io_immd_se_hi_1 = cat(io_immd_se_hi_hi_1, io_immd_se_hi_lo_1) @[Cat.scala 30:58]
        node _io_immd_se_T_4 = cat(io_immd_se_hi_1, io_immd_se_lo_1) @[Cat.scala 30:58]
        node _io_immd_se_T_5 = dshl(_io_immd_se_T_4, UInt<4>("h0c")) @[Immediate_Gen.scala 22:111]
        node _io_immd_se_T_6 = asSInt(_io_immd_se_T_5) @[Immediate_Gen.scala 22:120]
        io.immd_se <= _io_immd_se_T_6 @[Immediate_Gen.scala 22:28]
        skip @[Immediate_Gen.scala 21:44]
      else : @[Immediate_Gen.scala 25:76]
        node _T_4 = bits(io.instr, 6, 0) @[Immediate_Gen.scala 25:23]
        node _T_5 = eq(_T_4, UInt<5>("h013")) @[Immediate_Gen.scala 25:28]
        node _T_6 = bits(io.instr, 6, 0) @[Immediate_Gen.scala 25:54]
        node _T_7 = eq(_T_6, UInt<2>("h03")) @[Immediate_Gen.scala 25:59]
        node _T_8 = or(_T_5, _T_7) @[Immediate_Gen.scala 25:44]
        when _T_8 : @[Immediate_Gen.scala 25:76]
          node _io_immd_se_T_7 = bits(io.instr, 31, 31) @[Immediate_Gen.scala 26:52]
          node _io_immd_se_T_8 = bits(_io_immd_se_T_7, 0, 0) @[Bitwise.scala 72:15]
          node io_immd_se_hi_2 = mux(_io_immd_se_T_8, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
          node io_immd_se_lo_2 = bits(io.instr, 31, 20) @[Immediate_Gen.scala 26:66]
          node _io_immd_se_T_9 = cat(io_immd_se_hi_2, io_immd_se_lo_2) @[Cat.scala 30:58]
          node _io_immd_se_T_10 = asSInt(_io_immd_se_T_9) @[Immediate_Gen.scala 26:76]
          io.immd_se <= _io_immd_se_T_10 @[Immediate_Gen.scala 26:28]
          skip @[Immediate_Gen.scala 25:76]
        else : @[Immediate_Gen.scala 29:44]
          node _T_9 = bits(io.instr, 6, 0) @[Immediate_Gen.scala 29:23]
          node _T_10 = eq(_T_9, UInt<7>("h063")) @[Immediate_Gen.scala 29:28]
          when _T_10 : @[Immediate_Gen.scala 29:44]
            node _io_immd_se_T_11 = bits(io.instr, 31, 31) @[Immediate_Gen.scala 30:52]
            node _io_immd_se_T_12 = bits(_io_immd_se_T_11, 0, 0) @[Bitwise.scala 72:15]
            node io_immd_se_hi_hi_hi_1 = mux(_io_immd_se_T_12, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
            node io_immd_se_hi_hi_lo_1 = bits(io.instr, 31, 31) @[Immediate_Gen.scala 30:66]
            node io_immd_se_hi_lo_2 = bits(io.instr, 7, 7) @[Immediate_Gen.scala 30:79]
            node io_immd_se_lo_hi_hi = bits(io.instr, 30, 25) @[Immediate_Gen.scala 30:91]
            node io_immd_se_lo_hi_lo = bits(io.instr, 11, 8) @[Immediate_Gen.scala 30:107]
            node io_immd_se_lo_hi_1 = cat(io_immd_se_lo_hi_hi, io_immd_se_lo_hi_lo) @[Cat.scala 30:58]
            node io_immd_se_lo_3 = cat(io_immd_se_lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
            node io_immd_se_hi_hi_2 = cat(io_immd_se_hi_hi_hi_1, io_immd_se_hi_hi_lo_1) @[Cat.scala 30:58]
            node io_immd_se_hi_3 = cat(io_immd_se_hi_hi_2, io_immd_se_hi_lo_2) @[Cat.scala 30:58]
            node _io_immd_se_T_13 = cat(io_immd_se_hi_3, io_immd_se_lo_3) @[Cat.scala 30:58]
            node _io_immd_se_T_14 = add(_io_immd_se_T_13, io.pc) @[Immediate_Gen.scala 30:119]
            node _io_immd_se_T_15 = tail(_io_immd_se_T_14, 1) @[Immediate_Gen.scala 30:119]
            node _io_immd_se_T_16 = asSInt(_io_immd_se_T_15) @[Immediate_Gen.scala 30:134]
            io.immd_se <= _io_immd_se_T_16 @[Immediate_Gen.scala 30:28]
            skip @[Immediate_Gen.scala 29:44]
          else : @[Immediate_Gen.scala 33:44]
            node _T_11 = bits(io.instr, 6, 0) @[Immediate_Gen.scala 33:23]
            node _T_12 = eq(_T_11, UInt<7>("h06f")) @[Immediate_Gen.scala 33:28]
            when _T_12 : @[Immediate_Gen.scala 33:44]
              node uj_imm21_hi_hi_hi = bits(io.instr, 31, 31) @[Immediate_Gen.scala 34:45]
              node uj_imm21_hi_hi_lo = bits(io.instr, 19, 12) @[Immediate_Gen.scala 34:58]
              node uj_imm21_hi_lo = bits(io.instr, 20, 20) @[Immediate_Gen.scala 34:74]
              node uj_imm21_lo_hi = bits(io.instr, 30, 21) @[Immediate_Gen.scala 34:87]
              node uj_imm21_lo = cat(uj_imm21_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
              node uj_imm21_hi_hi = cat(uj_imm21_hi_hi_hi, uj_imm21_hi_hi_lo) @[Cat.scala 30:58]
              node uj_imm21_hi = cat(uj_imm21_hi_hi, uj_imm21_hi_lo) @[Cat.scala 30:58]
              node io_immd_se_lo_4 = cat(uj_imm21_hi, uj_imm21_lo) @[Cat.scala 30:58]
              node _io_immd_se_T_17 = bits(io_immd_se_lo_4, 20, 20) @[Immediate_Gen.scala 35:49]
              node _io_immd_se_T_18 = bits(_io_immd_se_T_17, 0, 0) @[Bitwise.scala 72:15]
              node io_immd_se_hi_4 = mux(_io_immd_se_T_18, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
              node _io_immd_se_T_19 = cat(io_immd_se_hi_4, io_immd_se_lo_4) @[Cat.scala 30:58]
              node _io_immd_se_T_20 = add(_io_immd_se_T_19, io.pc) @[Immediate_Gen.scala 35:66]
              node _io_immd_se_T_21 = tail(_io_immd_se_T_20, 1) @[Immediate_Gen.scala 35:66]
              node _io_immd_se_T_22 = asSInt(_io_immd_se_T_21) @[Immediate_Gen.scala 35:75]
              io.immd_se <= _io_immd_se_T_22 @[Immediate_Gen.scala 35:24]
              skip @[Immediate_Gen.scala 33:44]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_op : UInt<5>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, alu_out : SInt<32>}
    
    io.alu_out <= asSInt(UInt<1>("h00")) @[ALU.scala 15:16]
    node _T = eq(io.alu_op, UInt<1>("h00")) @[ALU.scala 17:22]
    when _T : @[ALU.scala 17:30]
      node _io_alu_out_T = add(io.arg_x, io.arg_y) @[ALU.scala 18:32]
      node _io_alu_out_T_1 = tail(_io_alu_out_T, 1) @[ALU.scala 18:32]
      node _io_alu_out_T_2 = asSInt(_io_alu_out_T_1) @[ALU.scala 18:32]
      io.alu_out <= _io_alu_out_T_2 @[ALU.scala 18:20]
      skip @[ALU.scala 17:30]
    else : @[ALU.scala 20:35]
      node _T_1 = eq(io.alu_op, UInt<1>("h01")) @[ALU.scala 20:27]
      when _T_1 : @[ALU.scala 20:35]
        node _io_alu_out_T_3 = sub(io.arg_x, io.arg_y) @[ALU.scala 21:32]
        node _io_alu_out_T_4 = tail(_io_alu_out_T_3, 1) @[ALU.scala 21:32]
        node _io_alu_out_T_5 = asSInt(_io_alu_out_T_4) @[ALU.scala 21:32]
        io.alu_out <= _io_alu_out_T_5 @[ALU.scala 21:20]
        skip @[ALU.scala 20:35]
      else : @[ALU.scala 23:35]
        node _T_2 = eq(io.alu_op, UInt<2>("h02")) @[ALU.scala 23:27]
        when _T_2 : @[ALU.scala 23:35]
          node _io_alu_out_T_6 = and(io.arg_x, io.arg_y) @[ALU.scala 24:32]
          node _io_alu_out_T_7 = asSInt(_io_alu_out_T_6) @[ALU.scala 24:32]
          io.alu_out <= _io_alu_out_T_7 @[ALU.scala 24:20]
          skip @[ALU.scala 23:35]
        else : @[ALU.scala 26:35]
          node _T_3 = eq(io.alu_op, UInt<2>("h03")) @[ALU.scala 26:27]
          when _T_3 : @[ALU.scala 26:35]
            node _io_alu_out_T_8 = or(io.arg_x, io.arg_y) @[ALU.scala 27:33]
            node _io_alu_out_T_9 = asSInt(_io_alu_out_T_8) @[ALU.scala 27:33]
            io.alu_out <= _io_alu_out_T_9 @[ALU.scala 27:21]
            skip @[ALU.scala 26:35]
          else : @[ALU.scala 29:35]
            node _T_4 = eq(io.alu_op, UInt<3>("h04")) @[ALU.scala 29:27]
            when _T_4 : @[ALU.scala 29:35]
              node _io_alu_out_T_10 = xor(io.arg_x, io.arg_y) @[ALU.scala 30:33]
              node _io_alu_out_T_11 = asSInt(_io_alu_out_T_10) @[ALU.scala 30:33]
              io.alu_out <= _io_alu_out_T_11 @[ALU.scala 30:21]
              skip @[ALU.scala 29:35]
            else : @[ALU.scala 32:35]
              node _T_5 = eq(io.alu_op, UInt<3>("h05")) @[ALU.scala 32:27]
              when _T_5 : @[ALU.scala 32:35]
                node _io_alu_out_T_12 = bits(io.arg_y, 4, 0) @[ALU.scala 33:43]
                node _io_alu_out_T_13 = dshr(io.arg_x, _io_alu_out_T_12) @[ALU.scala 33:32]
                io.alu_out <= _io_alu_out_T_13 @[ALU.scala 33:20]
                skip @[ALU.scala 32:35]
              else : @[ALU.scala 35:35]
                node _T_6 = eq(io.alu_op, UInt<3>("h06")) @[ALU.scala 35:27]
                when _T_6 : @[ALU.scala 35:35]
                  node _io_alu_out_T_14 = bits(io.arg_y, 4, 0) @[ALU.scala 36:43]
                  node _io_alu_out_T_15 = dshr(io.arg_x, _io_alu_out_T_14) @[ALU.scala 36:32]
                  io.alu_out <= _io_alu_out_T_15 @[ALU.scala 36:20]
                  skip @[ALU.scala 35:35]
                else : @[ALU.scala 38:35]
                  node _T_7 = eq(io.alu_op, UInt<3>("h07")) @[ALU.scala 38:27]
                  when _T_7 : @[ALU.scala 38:35]
                    node _io_alu_out_T_16 = bits(io.arg_y, 4, 0) @[ALU.scala 39:43]
                    node _io_alu_out_T_17 = dshl(io.arg_x, _io_alu_out_T_16) @[ALU.scala 39:32]
                    io.alu_out <= _io_alu_out_T_17 @[ALU.scala 39:20]
                    skip @[ALU.scala 38:35]
                  else : @[ALU.scala 48:36]
                    node _T_8 = eq(io.alu_op, UInt<4>("h0a")) @[ALU.scala 48:27]
                    when _T_8 : @[ALU.scala 48:36]
                      io.alu_out <= io.arg_x @[ALU.scala 49:20]
                      skip @[ALU.scala 48:36]
                    else : @[ALU.scala 51:37]
                      node _T_9 = eq(io.alu_op, UInt<4>("h0b")) @[ALU.scala 51:27]
                      when _T_9 : @[ALU.scala 51:37]
                        io.alu_out <= io.arg_y @[ALU.scala 52:20]
                        skip @[ALU.scala 51:37]
                      else : @[ALU.scala 57:16]
                        io.alu_out <= asSInt(UInt<1>("h00")) @[ALU.scala 58:24]
                        skip @[ALU.scala 57:16]
    
  module Ins_Mem : 
    input clock : Clock
    input reset : Reset
    output io : {flip rAdder : UInt<12>, wData : UInt<32>}
    
    cmem ins_mem : UInt<32>[1024] @[Ins_Mem.scala 16:26]
    node _io_wData_T = bits(io.rAdder, 9, 0) @[Ins_Mem.scala 17:28]
    infer mport io_wData_MPORT = ins_mem[_io_wData_T], clock @[Ins_Mem.scala 17:28]
    io.wData <= io_wData_MPORT @[Ins_Mem.scala 17:18]
    
  module JALR : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : SInt<32>, flip b : SInt<32>, out : SInt<32>}
    
    node _io_out_T = add(io.a, io.b) @[JALR.scala 17:25]
    node _io_out_T_1 = tail(_io_out_T, 1) @[JALR.scala 17:25]
    node _io_out_T_2 = asSInt(_io_out_T_1) @[JALR.scala 17:25]
    node _io_out_T_3 = and(_io_out_T_2, asSInt(UInt<37>("h0842b560d0"))) @[JALR.scala 17:33]
    node _io_out_T_4 = asSInt(_io_out_T_3) @[JALR.scala 17:33]
    io.out <= _io_out_T_4 @[JALR.scala 17:16]
    
  module Data_Mem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<12>, flip data_in : SInt<32>, data_out : SInt<32>, flip store : UInt<1>, flip load : UInt<1>}
    
    cmem data_Mem : SInt<32>[1024] @[Data_Mem.scala 19:27]
    io.data_out <= asSInt(UInt<1>("h00")) @[Data_Mem.scala 20:21]
    node _T = eq(io.load, UInt<1>("h01")) @[Data_Mem.scala 22:22]
    when _T : @[Data_Mem.scala 22:30]
      node _io_data_out_T = bits(io.addr, 9, 0) @[Data_Mem.scala 23:45]
      read mport io_data_out_MPORT = data_Mem[_io_data_out_T], clock @[Data_Mem.scala 23:45]
      io.data_out <= io_data_out_MPORT @[Data_Mem.scala 23:29]
      skip @[Data_Mem.scala 22:30]
    else : @[Data_Mem.scala 24:37]
      node _T_1 = eq(io.store, UInt<1>("h01")) @[Data_Mem.scala 24:29]
      when _T_1 : @[Data_Mem.scala 24:37]
        node _T_2 = bits(io.addr, 9, 0)
        write mport MPORT = data_Mem[_T_2], clock
        MPORT <= io.data_in
        skip @[Data_Mem.scala 24:37]
      else : @[Data_Mem.scala 26:16]
        io.data_out is invalid @[Data_Mem.scala 27:29]
        skip @[Data_Mem.scala 26:16]
    
  module Branch : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip branch : UInt<1>, flip arg_x : UInt<32>, flip arg_y : UInt<32>, br_taken : UInt<1>}
    
    node _Equalto_T = asSInt(io.arg_x) @[Branch.scala 28:33]
    node _Equalto_T_1 = asSInt(io.arg_y) @[Branch.scala 28:53]
    node _Equalto_T_2 = eq(_Equalto_T, _Equalto_T_1) @[Branch.scala 28:40]
    node Equalto = mux(_Equalto_T_2, UInt<1>("h01"), UInt<1>("h00")) @[Branch.scala 28:22]
    node _Greterthan_T = asSInt(io.arg_x) @[Branch.scala 29:36]
    node _Greterthan_T_1 = asSInt(io.arg_y) @[Branch.scala 29:54]
    node _Greterthan_T_2 = gt(_Greterthan_T, _Greterthan_T_1) @[Branch.scala 29:43]
    node Greterthan = mux(_Greterthan_T_2, UInt<1>("h01"), UInt<1>("h00")) @[Branch.scala 29:25]
    node _Lessthan_T = asSInt(io.arg_x) @[Branch.scala 30:34]
    node _Lessthan_T_1 = asSInt(io.arg_y) @[Branch.scala 30:52]
    node _Lessthan_T_2 = lt(_Lessthan_T, _Lessthan_T_1) @[Branch.scala 30:41]
    node Lessthan = mux(_Lessthan_T_2, UInt<1>("h01"), UInt<1>("h00")) @[Branch.scala 30:23]
    node _Equalto_U_T = eq(io.arg_x, io.arg_y) @[Branch.scala 32:35]
    node Equalto_U = mux(_Equalto_U_T, UInt<1>("h01"), UInt<1>("h00")) @[Branch.scala 32:24]
    node _Greterthan_U_T = gt(io.arg_x, io.arg_y) @[Branch.scala 33:38]
    node Greterthan_U = mux(_Greterthan_U_T, UInt<1>("h01"), UInt<1>("h00")) @[Branch.scala 33:27]
    node _Lessthan_U_T = lt(io.arg_x, io.arg_y) @[Branch.scala 34:36]
    node Lessthan_U = mux(_Lessthan_U_T, UInt<1>("h01"), UInt<1>("h00")) @[Branch.scala 34:25]
    node _out_T = eq(io.branch, UInt<1>("h01")) @[Branch.scala 36:30]
    node _out_T_1 = eq(io.func3, UInt<3>("h00")) @[Branch.scala 36:54]
    node _out_T_2 = eq(io.func3, UInt<3>("h01")) @[Branch.scala 36:87]
    node _out_T_3 = not(Equalto) @[Branch.scala 36:97]
    node _out_T_4 = eq(io.func3, UInt<3>("h04")) @[Branch.scala 36:121]
    node _out_T_5 = eq(io.func3, UInt<3>("h05")) @[Branch.scala 36:155]
    node _out_T_6 = or(Greterthan, Equalto) @[Branch.scala 36:177]
    node _out_T_7 = eq(io.func3, UInt<3>("h06")) @[Branch.scala 36:203]
    node _out_T_8 = eq(io.func3, UInt<3>("h07")) @[Branch.scala 36:240]
    node _out_T_9 = or(Greterthan_U, Equalto_U) @[Branch.scala 36:265]
    node _out_T_10 = mux(_out_T_8, _out_T_9, UInt<1>("h00")) @[Branch.scala 36:229]
    node _out_T_11 = mux(_out_T_7, Lessthan_U, _out_T_10) @[Branch.scala 36:192]
    node _out_T_12 = mux(_out_T_5, _out_T_6, _out_T_11) @[Branch.scala 36:144]
    node _out_T_13 = mux(_out_T_4, Lessthan, _out_T_12) @[Branch.scala 36:110]
    node _out_T_14 = mux(_out_T_2, _out_T_3, _out_T_13) @[Branch.scala 36:76]
    node _out_T_15 = mux(_out_T_1, Equalto, _out_T_14) @[Branch.scala 36:43]
    node out = mux(_out_T, _out_T_15, UInt<1>("h00")) @[Branch.scala 36:18]
    io.br_taken <= out @[Branch.scala 38:17]
    
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip input : UInt<32>, PC_4 : UInt<32>, pc : UInt<32>}
    
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[PC.scala 15:26]
    reg <= io.input @[PC.scala 16:13]
    io.pc <= reg @[PC.scala 17:15]
    node _io_PC_4_T = add(reg, UInt<3>("h04")) @[PC.scala 18:24]
    node _io_PC_4_T_1 = tail(_io_PC_4_T, 1) @[PC.scala 18:24]
    io.PC_4 <= _io_PC_4_T_1 @[PC.scala 18:17]
    
  module Alu_Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip ALUop : UInt<5>, flip func7 : UInt<1>, flip func3 : UInt<5>, ALUcont : UInt<4>}
    
    node _T = eq(io.ALUop, UInt<1>("h00")) @[Alu_Control.scala 16:31]
    when _T : @[Alu_Control.scala 16:44]
      node _T_1 = eq(io.func7, UInt<1>("h00")) @[Alu_Control.scala 17:42]
      when _T_1 : @[Alu_Control.scala 17:54]
        node _io_ALUcont_T = eq(io.func3, UInt<1>("h00")) @[Alu_Control.scala 19:46]
        node _io_ALUcont_T_1 = eq(io.func3, UInt<3>("h07")) @[Alu_Control.scala 20:46]
        node _io_ALUcont_T_2 = eq(io.func3, UInt<3>("h06")) @[Alu_Control.scala 21:46]
        node _io_ALUcont_T_3 = eq(io.func3, UInt<3>("h04")) @[Alu_Control.scala 22:46]
        node _io_ALUcont_T_4 = eq(io.func3, UInt<1>("h01")) @[Alu_Control.scala 23:46]
        node _io_ALUcont_T_5 = eq(io.func3, UInt<3>("h05")) @[Alu_Control.scala 24:46]
        node _io_ALUcont_T_6 = eq(io.func3, UInt<2>("h02")) @[Alu_Control.scala 25:46]
        node _io_ALUcont_T_7 = eq(io.func3, UInt<2>("h03")) @[Alu_Control.scala 26:46]
        node _io_ALUcont_T_8 = mux(_io_ALUcont_T_7, UInt<4>("h09"), UInt<1>("h00")) @[Mux.scala 98:16]
        node _io_ALUcont_T_9 = mux(_io_ALUcont_T_6, UInt<4>("h08"), _io_ALUcont_T_8) @[Mux.scala 98:16]
        node _io_ALUcont_T_10 = mux(_io_ALUcont_T_5, UInt<3>("h05"), _io_ALUcont_T_9) @[Mux.scala 98:16]
        node _io_ALUcont_T_11 = mux(_io_ALUcont_T_4, UInt<3>("h07"), _io_ALUcont_T_10) @[Mux.scala 98:16]
        node _io_ALUcont_T_12 = mux(_io_ALUcont_T_3, UInt<3>("h04"), _io_ALUcont_T_11) @[Mux.scala 98:16]
        node _io_ALUcont_T_13 = mux(_io_ALUcont_T_2, UInt<2>("h03"), _io_ALUcont_T_12) @[Mux.scala 98:16]
        node _io_ALUcont_T_14 = mux(_io_ALUcont_T_1, UInt<2>("h02"), _io_ALUcont_T_13) @[Mux.scala 98:16]
        node _io_ALUcont_T_15 = mux(_io_ALUcont_T, UInt<1>("h00"), _io_ALUcont_T_14) @[Mux.scala 98:16]
        io.ALUcont <= _io_ALUcont_T_15 @[Alu_Control.scala 18:47]
        skip @[Alu_Control.scala 17:54]
      else : @[Alu_Control.scala 28:39]
        io.ALUcont is invalid @[Alu_Control.scala 29:47]
        skip @[Alu_Control.scala 28:39]
      skip @[Alu_Control.scala 16:44]
    else : @[Alu_Control.scala 31:50]
      node _T_2 = eq(io.ALUop, UInt<1>("h01")) @[Alu_Control.scala 31:37]
      when _T_2 : @[Alu_Control.scala 31:50]
        node _T_3 = eq(io.func7, UInt<1>("h00")) @[Alu_Control.scala 32:42]
        when _T_3 : @[Alu_Control.scala 32:54]
          node _io_ALUcont_T_16 = eq(io.func3, UInt<1>("h00")) @[Alu_Control.scala 34:46]
          node _io_ALUcont_T_17 = eq(io.func3, UInt<3>("h07")) @[Alu_Control.scala 35:46]
          node _io_ALUcont_T_18 = eq(io.func3, UInt<3>("h06")) @[Alu_Control.scala 36:46]
          node _io_ALUcont_T_19 = eq(io.func3, UInt<3>("h04")) @[Alu_Control.scala 37:46]
          node _io_ALUcont_T_20 = eq(io.func3, UInt<1>("h01")) @[Alu_Control.scala 38:46]
          node _io_ALUcont_T_21 = eq(io.func3, UInt<3>("h05")) @[Alu_Control.scala 39:46]
          node _io_ALUcont_T_22 = eq(io.func3, UInt<2>("h02")) @[Alu_Control.scala 40:46]
          node _io_ALUcont_T_23 = eq(io.func3, UInt<2>("h03")) @[Alu_Control.scala 41:46]
          node _io_ALUcont_T_24 = mux(_io_ALUcont_T_23, UInt<4>("h09"), UInt<1>("h00")) @[Mux.scala 98:16]
          node _io_ALUcont_T_25 = mux(_io_ALUcont_T_22, UInt<4>("h08"), _io_ALUcont_T_24) @[Mux.scala 98:16]
          node _io_ALUcont_T_26 = mux(_io_ALUcont_T_21, UInt<3>("h05"), _io_ALUcont_T_25) @[Mux.scala 98:16]
          node _io_ALUcont_T_27 = mux(_io_ALUcont_T_20, UInt<3>("h07"), _io_ALUcont_T_26) @[Mux.scala 98:16]
          node _io_ALUcont_T_28 = mux(_io_ALUcont_T_19, UInt<3>("h04"), _io_ALUcont_T_27) @[Mux.scala 98:16]
          node _io_ALUcont_T_29 = mux(_io_ALUcont_T_18, UInt<2>("h03"), _io_ALUcont_T_28) @[Mux.scala 98:16]
          node _io_ALUcont_T_30 = mux(_io_ALUcont_T_17, UInt<2>("h02"), _io_ALUcont_T_29) @[Mux.scala 98:16]
          node _io_ALUcont_T_31 = mux(_io_ALUcont_T_16, UInt<1>("h00"), _io_ALUcont_T_30) @[Mux.scala 98:16]
          io.ALUcont <= _io_ALUcont_T_31 @[Alu_Control.scala 33:47]
          skip @[Alu_Control.scala 32:54]
        else : @[Alu_Control.scala 43:39]
          io.ALUcont is invalid @[Alu_Control.scala 44:47]
          skip @[Alu_Control.scala 43:39]
        skip @[Alu_Control.scala 31:50]
      else : @[Alu_Control.scala 46:50]
        node _T_4 = eq(io.ALUop, UInt<3>("h05")) @[Alu_Control.scala 46:37]
        when _T_4 : @[Alu_Control.scala 46:50]
          io.ALUcont <= UInt<1>("h00") @[Alu_Control.scala 47:36]
          skip @[Alu_Control.scala 46:50]
        else : @[Alu_Control.scala 48:50]
          node _T_5 = eq(io.ALUop, UInt<3>("h04")) @[Alu_Control.scala 48:37]
          when _T_5 : @[Alu_Control.scala 48:50]
            io.ALUcont <= UInt<1>("h00") @[Alu_Control.scala 49:36]
            skip @[Alu_Control.scala 48:50]
          else : @[Alu_Control.scala 50:50]
            node _T_6 = eq(io.ALUop, UInt<3>("h06")) @[Alu_Control.scala 50:37]
            when _T_6 : @[Alu_Control.scala 50:50]
              io.ALUcont <= UInt<1>("h00") @[Alu_Control.scala 51:36]
              skip @[Alu_Control.scala 50:50]
            else : @[Alu_Control.scala 52:50]
              node _T_7 = eq(io.ALUop, UInt<2>("h03")) @[Alu_Control.scala 52:37]
              when _T_7 : @[Alu_Control.scala 52:50]
                io.ALUcont <= UInt<5>("h01f") @[Alu_Control.scala 53:36]
                skip @[Alu_Control.scala 52:50]
              else : @[Alu_Control.scala 54:28]
                io.ALUcont is invalid @[Alu_Control.scala 55:36]
                skip @[Alu_Control.scala 54:28]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {ins_out : UInt<32>}
    
    inst control of Control @[TOP.scala 11:25]
    control.clock <= clock
    control.reset <= reset
    inst register of Reg_File @[TOP.scala 12:26]
    register.clock <= clock
    register.reset <= reset
    inst immediate of Immediate_Gen @[TOP.scala 13:27]
    immediate.clock <= clock
    immediate.reset <= reset
    inst alu of ALU @[TOP.scala 14:21]
    alu.clock <= clock
    alu.reset <= reset
    inst ins_mem of Ins_Mem @[TOP.scala 15:25]
    ins_mem.clock <= clock
    ins_mem.reset <= reset
    inst jalr of JALR @[TOP.scala 16:22]
    jalr.clock <= clock
    jalr.reset <= reset
    inst data_mem of Data_Mem @[TOP.scala 17:26]
    data_mem.clock <= clock
    data_mem.reset <= reset
    inst branch of Branch @[TOP.scala 18:24]
    branch.clock <= clock
    branch.reset <= reset
    inst pc of PC @[TOP.scala 19:20]
    pc.clock <= clock
    pc.reset <= reset
    inst alu_con of Alu_Control @[TOP.scala 20:25]
    alu_con.clock <= clock
    alu_con.reset <= reset
    node _ins_mem_io_rAdder_T = bits(pc.io.pc, 11, 2) @[TOP.scala 26:34]
    ins_mem.io.rAdder <= _ins_mem_io_rAdder_T @[TOP.scala 26:23]
    io.ins_out <= ins_mem.io.wData @[TOP.scala 27:16]
    node _control_io_opcode_T = bits(io.ins_out, 6, 0) @[TOP.scala 30:36]
    control.io.opcode <= _control_io_opcode_T @[TOP.scala 30:23]
    register.io.Reg_en <= control.io.RegWrite @[TOP.scala 33:24]
    node _register_io_rs1_T = bits(io.ins_out, 19, 15) @[TOP.scala 34:34]
    register.io.rs1 <= _register_io_rs1_T @[TOP.scala 34:21]
    node _register_io_rs2_T = bits(io.ins_out, 24, 20) @[TOP.scala 35:34]
    register.io.rs2 <= _register_io_rs2_T @[TOP.scala 35:21]
    node _register_io_rd_T = bits(io.ins_out, 11, 7) @[TOP.scala 36:34]
    register.io.rd <= _register_io_rd_T @[TOP.scala 36:21]
    immediate.io.instr <= io.ins_out @[TOP.scala 39:24]
    immediate.io.pc <= pc.io.pc @[TOP.scala 40:21]
    pc.io.input <= pc.io.PC_4 @[TOP.scala 42:17]
    branch.io.branch <= control.io.branch @[TOP.scala 44:22]
    node _branch_io_func3_T = bits(io.ins_out, 14, 12) @[TOP.scala 45:34]
    branch.io.func3 <= _branch_io_func3_T @[TOP.scala 45:21]
    node _branch_io_arg_x_T = bits(io.ins_out, 19, 15) @[TOP.scala 46:34]
    branch.io.arg_x <= _branch_io_arg_x_T @[TOP.scala 46:21]
    node _branch_io_arg_y_T = bits(io.ins_out, 24, 20) @[TOP.scala 47:34]
    branch.io.arg_y <= _branch_io_arg_y_T @[TOP.scala 47:21]
    node _T = eq(control.io.operand_A_sel, UInt<1>("h01")) @[TOP.scala 50:35]
    when _T : @[TOP.scala 50:47]
      node _alu_io_arg_x_T = asSInt(pc.io.pc) @[TOP.scala 51:36]
      alu.io.arg_x <= _alu_io_arg_x_T @[TOP.scala 51:22]
      skip @[TOP.scala 50:47]
    else : @[TOP.scala 52:53]
      node _T_1 = eq(control.io.operand_A_sel, UInt<2>("h02")) @[TOP.scala 52:41]
      when _T_1 : @[TOP.scala 52:53]
        node _alu_io_arg_x_T_1 = asSInt(pc.io.PC_4) @[TOP.scala 53:38]
        alu.io.arg_x <= _alu_io_arg_x_T_1 @[TOP.scala 53:22]
        skip @[TOP.scala 52:53]
      else : @[TOP.scala 54:53]
        node _T_2 = eq(control.io.operand_A_sel, UInt<1>("h00")) @[TOP.scala 54:41]
        when _T_2 : @[TOP.scala 54:53]
          alu.io.arg_x <= register.io.ws1 @[TOP.scala 55:22]
          skip @[TOP.scala 54:53]
        else : @[TOP.scala 56:16]
          alu.io.arg_x <= asSInt(UInt<1>("h00")) @[TOP.scala 57:22]
          skip @[TOP.scala 56:16]
    node _T_3 = eq(control.io.extend_sel, UInt<1>("h00")) @[TOP.scala 62:32]
    node _T_4 = eq(control.io.operand_B_sel, UInt<1>("h00")) @[TOP.scala 62:71]
    node _T_5 = and(_T_3, _T_4) @[TOP.scala 62:44]
    when _T_5 : @[TOP.scala 62:83]
      alu.io.arg_y <= register.io.ws2 @[TOP.scala 63:22]
      skip @[TOP.scala 62:83]
    else : @[TOP.scala 64:16]
      alu.io.arg_y <= immediate.io.immd_se @[TOP.scala 65:22]
      skip @[TOP.scala 64:16]
    alu_con.io.ALUop <= control.io.ALUoperation @[TOP.scala 69:22]
    node _alu_con_io_func3_T = bits(io.ins_out, 14, 12) @[TOP.scala 70:35]
    alu_con.io.func3 <= _alu_con_io_func3_T @[TOP.scala 70:22]
    node _alu_con_io_func7_T = bits(io.ins_out, 30, 30) @[TOP.scala 71:35]
    alu_con.io.func7 <= _alu_con_io_func7_T @[TOP.scala 71:22]
    alu.io.alu_op <= alu_con.io.ALUcont @[TOP.scala 74:19]
    node _T_6 = eq(control.io.Next_pc, UInt<2>("h03")) @[TOP.scala 77:29]
    when _T_6 : @[TOP.scala 77:41]
      node _pc_io_input_T = asUInt(jalr.io.out) @[TOP.scala 78:38]
      pc.io.input <= _pc_io_input_T @[TOP.scala 78:21]
      skip @[TOP.scala 77:41]
    else : @[TOP.scala 79:47]
      node _T_7 = eq(control.io.Next_pc, UInt<2>("h02")) @[TOP.scala 79:35]
      when _T_7 : @[TOP.scala 79:47]
        node _pc_io_input_T_1 = asUInt(immediate.io.immd_se) @[TOP.scala 80:47]
        pc.io.input <= _pc_io_input_T_1 @[TOP.scala 80:21]
        skip @[TOP.scala 79:47]
      else : @[TOP.scala 81:98]
        node _T_8 = eq(control.io.Next_pc, UInt<1>("h01")) @[TOP.scala 81:35]
        node _T_9 = and(control.io.branch, branch.io.br_taken) @[TOP.scala 81:68]
        node _T_10 = eq(_T_9, UInt<1>("h01")) @[TOP.scala 81:90]
        node _T_11 = and(_T_8, _T_10) @[TOP.scala 81:47]
        when _T_11 : @[TOP.scala 81:98]
          node _pc_io_input_T_2 = asUInt(immediate.io.immd_se) @[TOP.scala 82:47]
          pc.io.input <= _pc_io_input_T_2 @[TOP.scala 82:21]
          skip @[TOP.scala 81:98]
        else : @[TOP.scala 83:16]
          pc.io.input <= pc.io.PC_4 @[TOP.scala 84:21]
          skip @[TOP.scala 83:16]
    node _data_mem_io_addr_T = bits(alu.io.alu_out, 13, 2) @[TOP.scala 88:40]
    data_mem.io.addr <= _data_mem_io_addr_T @[TOP.scala 88:22]
    data_mem.io.load <= control.io.MemRead @[TOP.scala 89:22]
    data_mem.io.store <= control.io.MemWrite @[TOP.scala 90:23]
    data_mem.io.data_in <= register.io.ws2 @[TOP.scala 91:25]
    node _T_12 = eq(control.io.MemtoReg, UInt<1>("h00")) @[TOP.scala 94:30]
    when _T_12 : @[TOP.scala 94:39]
      register.io.wd <= data_mem.io.data_out @[TOP.scala 95:24]
      skip @[TOP.scala 94:39]
    else : @[TOP.scala 96:16]
      register.io.wd <= alu.io.alu_out @[TOP.scala 97:24]
      skip @[TOP.scala 96:16]
    jalr.io.a <= register.io.ws1 @[TOP.scala 101:15]
    jalr.io.b <= immediate.io.immd_se @[TOP.scala 102:15]
    
